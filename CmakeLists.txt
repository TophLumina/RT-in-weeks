if (DEFINED ENV{VCPKG_ROOT} AND NOT DEFINED CMAKE_TOOLCHAIN_FILE)
    set(CMAKE_TOOLCHAIN_FILE "$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake"
        CACHE STRING "")
    message("VCPKG_ROOT found: $ENV{VCPKG_ROOT}")
    message("Using toolchain file: ${CMAKE_TOOLCHAIN_FILE}")
else ()
    message("VCPKG_ROOT not found or CMAKE_TOOLCHAIN_FILE already defined.")
    # Optional: Manually specify the path to vcpkg if needed
    # set(CMAKE_TOOLCHAIN_FILE "path/to/vcpkg/scripts/buildsystems/vcpkg.cmake" CACHE STRING "")
endif()

message(STATUS "C compiler: ${CMAKE_C_COMPILER}")
message(STATUS "C++ compiler: ${CMAKE_CXX_COMPILER}")
message(STATUS "Compiler ID: ${CMAKE_CXX_COMPILER_ID}")

cmake_minimum_required(VERSION 3.10)

project(RayTracing)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# MATH DEFINES
add_compile_definitions (MATH_SUPPORT_CONSTEXPR)
add_compile_definitions (MATH_FORCE_INLINE)
# add_compile_definitions(MATH_FORCE_EXPLICIT)
add_compile_definitions (MATH_TEMPLATE_ALIASES)
add_compile_definitions (MATH_IOS)

aux_source_directory(. DIR_SRC)

add_executable(${PROJECT_NAME} ${DIR_SRC})

# Assimp
find_package(assimp)
target_link_libraries(${PROJECT_NAME} PRIVATE ${ASSIMP_LIBRARIES})
target_include_directories(${PROJECT_NAME} PRIVATE ${ASSIMP_INCLUDE_DIRS})